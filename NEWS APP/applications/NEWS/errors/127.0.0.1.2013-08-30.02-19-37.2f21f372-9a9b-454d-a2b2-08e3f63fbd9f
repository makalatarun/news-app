(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'Music'"
p3
sS'layer'
p4
S'/home/akshita/IIIT/II Year/III semester/SSAD/web2py/applications/NOUVELLES_EN_LIGNE/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\nimport datetime\ndef home():\n\ta=db(db.news.id > 0).select(db.news.ALL,orderby=~db.news.likes)\n\ty=[]\n\tt=[]\n\tm1 = db(db.category.id > 0).select(db.category.ALL)\n\tfor k in m1:\n\t\tw=k.name\n\t\tt.append(w)\n#for k in m1:\n#\t\tt.append(k.name)\n\tfor k in a:\n\t\tx={}\n\t\tid2 = k[\'posted_by\']\n\t\tc = db((db.news.posted_by == id2) & (db.auth_user.id == db.news.posted_by)).select(db.auth_user.ALL)[0]\n\t\tid1=k[\'Category\']\n\t\tb=db((db.news.Category == id1) & (db.category.id == db.news.Category)).select(db.category.ALL)[0]\n\t\tx[\'Head\']=k[\'Heading\']\n\t\tx[\'Cat\']=b[\'name\']\n\t\tx[\'id\']=k[\'id\']\n\t\tx[\'Des\']=k[\'Description\']\n\t\tx[\'By\']=str(c[\'first_name\'])+" " +str(c[\'last_name\'])\n\t\tx[\'On\']=k[\'posted_on\']\n\t\tx[\'likes\']=str(k[\'likes\'])\n\t\tx[\'url\']=k[\'Url\']\n\t\ty.append(x)\n\t\t\n\treturn locals()\ndef catgry():\n\ta=db(db.category.id > 0).select(db.category.ALL)\n\tt=[]\n\tfor k in a:\n\t\tw=k.name\n\t\tt.append(w)\n\tfor k in a:\n\t\tprint request.args(0)\n\t\tif k[\'name\']==request.args(0):\n\t\t\tz=k[\'id\']\n\t\t\ty=[]\n\t\t\tc=db((db.category.id == z)&(db.news.Category==db.category.id)).select(db.news.ALL,orderby=~db.news.likes)\n\t\t\tfor w in c:\n\t\t\t\tx={}\n\t\t\t\tid2 = w[\'posted_by\']\n\t\t\t\tc1 = db((db.news.posted_by == id2) & (db.auth_user.id == db.news.posted_by)).select(db.auth_user.ALL)[0]\n\t\t\t\tx[\'Head\']=w[\'Heading\']\n\t\t\t\tx[\'Cat\']=k[\'name\']\n\t\t\t\tx[\'Des\']=w[\'Description\']\n\t\t\t\tx[\'By\']=str(c1[\'first_name\'])+" " +str(c1[\'last_name\'])\n\t\t\t\tx[\'On\']=w[\'posted_on\']\n\t\t\t\tx[\'likes\']=str(w[\'likes\'])\n\t\t\t\tx[\'url\']=w[\'Url\']\n\t\t\t\tx[\'id\']=w[\'id\']\n\t\t\t\ty.append(x)\n\n\treturn locals()\n@auth.requires_login()\t\ndef post():\n#\tdb.news.likes.writable=db.news.likes.readable=False\n#idb.news.cmmnt.writable=db.news.cmmnt.readable=False\n\tdb.news.posted_on.readable=db.news.posted_on.writable=False\n\tdb.news.likes.readable=db.news.likes.writable=False\n\tform=SQLFORM(db.news)\n\tif form.process().accepted:\n\t\tresponse.flash=\'form accepted\'\n\t\tredirect(URL(r=request,f=\'home\'))\n\telif form.errors:\n\t\tresponse.flash=\'form has errors\'\n\treturn locals()\ndef show():\n\tid1=request.args(0)\n\ta=db((db.category.id==id1)&(db.news.Category==db.category.id)).select(db.news.ALL)[0]\n\tprint str(a[\'Heading\'])\n#+\'\\n\'+str(a[\'Category\'])+\'\\n\'str(a[\'Url\'])+\'\\n\'str(a[\'Description\'])+\'\\n\'str(a[\'posted_by\'])+\'\\n\'str(a[\'posted_on\'])\n\treturn locals()\ndef view():\n\ta=db(db.category.id>0).select(db.category.ALL)\n\ty=[]\n\tfor k in a:\n\t\tid1=k[\'id\']\n\t\tx=k[\'name\']\n\t\ty.append(db((db.category.id==id1)&(db.news.Category == db.category.id)).select(db.category.name,db.news.Heading,db.news.Url,db.news.posted_by,db.news.Category,db.news.posted_on,db.news.Description))\n\t\ty.append(db(db.news.id==db.comments.new_id).select(db.comments.body))\n\treturn locals()\n@auth.requires_login()\ndef likes_c():\n\tid1=request.args(0)\n\ta=db(db.news.id == id1).select(db.news.ALL)[0]\n\ty=db((db.news.id==id1)&(db.news.Category == db.category.id)).select(db.category.ALL)\n\tz="catgry.html/"+y[\'name\']\n\tprint z\n\ta.likes+=5\n\ta.update_record()\n\tredirect(URL(r=request,f=\'home\'))\n\treturn locals()\ndef likes_h():\n\tid1=request.args(0)\n\ta=db(db.news.id == id1).select(db.news.ALL)[0]\n\ta.likes+=5\n\ta.update_record()\n\tredirect(URL(r=request,f=\'home\'))\n\treturn locals()\n@auth.requires_login()\ndef unlike():\n\tid1=request.args(0)\n\ta=db(db.news.id == id1).select(db.news.ALL)[0]\n\ta.likes-=3\n\ta.update_record()\n\treturn locals()\n@auth.requires_login()\ndef edit_news():\n\tid1=int(request.args(0))\n\tdb.news.likes.writable=db.news.likes.readable=False\n\tdb.news.posted_on.readable=db.news.posted_on.writable=False\n\tform=SQLFORM(db.news,id1)\n\tif form.accepts(request.vars,session):\n\t\tredirect(URL(r=request,f=home))\n\telif form.errors:\n\t \tresponse.flash=\'errors\'\n\treturn locals()\n@auth.requires_login()\ndef delete_news():\n\tid1=int(request.args(0))\n\tdb(db.news.id == id1).delete()\n\treturn locals()\n@auth.requires_login()\ndef add_comments():\n\tid1=int(request.args(0))\n#a=db((db.news.id==id1)&(db.comments.new_id==db.news.id)).select(db.comments.ALL)[0]\n\tdb.comments.new_id.default=id1\n\tdb.comments.new_id.writable=db.comments.new_id.readable=False\n\tform=SQLFORM(db.comments)\n\tif form.accepts(request.vars,session):\n\t\tredirect(URL(r=request,f=home))\n\telif form.errors:\n\t \tresponse.flash="errors"\n\treturn locals()\n\nresponse._vars=response._caller(likes_c)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/applications/NOUVELLES_EN_LIGNE/controllers/default.py", line 214, in <module>\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/tools.py", line 3022, in f\n    return action(*a, **b)\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/applications/NOUVELLES_EN_LIGNE/controllers/default.py", line 163, in likes_c\n    a=db(db.news.id == id1).select(db.news.ALL)[0]\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 9958, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 2245, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 1691, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 1601, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 1366, in expand\n    return op(first, second, **optional_args)\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 1276, in EQ\n    self.expand(second, first.type))\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 1376, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/akshita/IIIT/II Year/III semester/SSAD/web2py/gluon/dal.py", line 1822, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'Music\'\n'
p11
s.